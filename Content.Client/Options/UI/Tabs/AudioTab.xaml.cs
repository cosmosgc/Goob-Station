using Content.Client.Audio;
using Content.Shared.CCVar;
using Robust.Client.Audio;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using Robust.Shared;
using Robust.Shared.Configuration;


namespace Content.Client.Options.UI.Tabs;

[GenerateTypedNameReferences]
public sealed partial class AudioTab : Control
{
    [Dependency] private readonly IConfigurationManager _cfg = default!;
    [Dependency] private readonly IAudioManager _audio = default!;

    public AudioTab()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        var masterVolume = Control.AddOptionPercentSlider(
            CVars.AudioMasterVolume,
            SliderVolumeMaster,
            scale: ContentAudioSystem.MasterVolumeMultiplier);
        masterVolume.ImmediateValueChanged += OnMasterVolumeSliderChanged;

        Control.AddOptionPercentSlider(
            CVars.MidiVolume,
            SliderVolumeMidi,
            scale: ContentAudioSystem.MidiVolumeMultiplier);

        Control.AddOptionPercentSlider(
            CCVars.AmbientMusicVolume,
            SliderVolumeAmbientMusic,
            scale: ContentAudioSystem.AmbientMusicMultiplier);

        Control.AddOptionPercentSlider(
            CCVars.AmbienceVolume,
            SliderVolumeAmbience,
            scale: ContentAudioSystem.AmbienceMultiplier);

        Control.AddOptionPercentSlider(
            CCVars.LobbyMusicVolume,
            SliderVolumeLobby,
            scale: ContentAudioSystem.LobbyMultiplier);

        Control.AddOptionPercentSlider(
            CCVars.InterfaceVolume,
            SliderVolumeInterface,
            scale: ContentAudioSystem.InterfaceMultiplier);

        Control.AddOptionSlider(
            CCVars.MaxAmbientSources,
            SliderMaxAmbienceSounds,
            _cfg.GetCVar(CCVars.MinMaxAmbientSourcesConfigured),
            _cfg.GetCVar(CCVars.MaxMaxAmbientSourcesConfigured));

        Control.AddOptionPercentSlider(
            CCVars.RadioVolume,
            RadioVolumeSlider,
            scale: ContentAudioSystem.RadioMultiplier);

        Control.AddOptionCheckBox(CCVars.LobbyMusicEnabled, LobbyMusicCheckBox);
        Control.AddOptionCheckBox(CCVars.RestartSoundsEnabled, RestartSoundsCheckBox);
        Control.AddOptionCheckBox(CCVars.EventMusicEnabled, EventMusicCheckBox);
        Control.AddOptionCheckBox(CCVars.AdminSoundsEnabled, AdminSoundsCheckBox);

        Control.AddOptionCheckBox(CCVars.RadioSoundsEnabled, RadioChatterCheckbox);
        Control.AddOption(new RadioOption(Control, _cfg, RadioCooldown));

        Control.Initialize();
    }
    private sealed class RadioOption : BaseOption
    {
        [Dependency] private readonly IConfigurationManager _cfg = default!;
        private readonly OptionDropDown _dropDown;

        private const int QualityVeryLow = 10;
        private const int QualityLow = 5;
        private const int QualityMedium = 2;
        private const int QualityHigh = 0;

        private const int QualityDefault = QualityMedium;

        public RadioOption(OptionsTabControlRow controller, IConfigurationManager cfg, OptionDropDown dropDown) : base(controller)
        {
            _cfg = cfg;
            _dropDown = dropDown;
            var button = dropDown.Button;
            button.AddItem(Loc.GetString("ui-options-lighting-very-low"), QualityVeryLow);
            button.AddItem(Loc.GetString("ui-options-lighting-low"), QualityLow);
            button.AddItem(Loc.GetString("ui-options-lighting-medium"), QualityMedium);
            button.AddItem(Loc.GetString("ui-options-lighting-high"), QualityHigh);
            button.OnItemSelected += OnOptionSelected;
        }



        private void OnOptionSelected(OptionButton.ItemSelectedEventArgs obj)
        {
            _dropDown.Button.SelectId(obj.Id);
            ValueChanged();
        }

        public override void LoadValue()
        {
            _dropDown.Button.SelectId(GetConfigRadioSpam());
        }

        public override void SaveValue()
        {
            switch (_dropDown.Button.SelectedId)
            {
                case QualityVeryLow:
                    _cfg.SetCVar(CCVars.RadioCooldown, 10f);
                    break;
                case QualityLow:
                    _cfg.SetCVar(CCVars.RadioCooldown, 5f);
                    break;
                default: // = QualityMedium
                    _cfg.SetCVar(CCVars.RadioCooldown, 2f);
                    break;
                case QualityHigh:
                    _cfg.SetCVar(CCVars.RadioCooldown, 0f);
                    break;
            }
            IsModified();
        }

        public override void ResetToDefault()
        {
            _dropDown.Button.SelectId(QualityDefault);
        }

        public override bool IsModified()
        {
            return _dropDown.Button.SelectedId != GetConfigRadioSpam();
        }

        public override bool IsModifiedFromDefault()
        {
            return _dropDown.Button.SelectedId != QualityDefault;
        }

        private int GetConfigRadioSpam()
        {
            var val = _cfg.GetCVar(CCVars.RadioCooldown);
            if (val == 10f)
                return QualityVeryLow;

            if ((val >= 5f))
                return QualityLow;

            if (val >= 2f)
                return QualityMedium;

            return QualityHigh;
        }
    }

    private void OnMasterVolumeSliderChanged(float value)
    {
        // TODO: I was thinking of giving OptionsTabControlRow a flag to "set CVar immediately", but I'm deferring that
        // until there's a proper system for enforcing people don't close the window with pending changes.
        _audio.SetMasterGain(value);
    }
}
